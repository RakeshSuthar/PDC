#include<stdio.h>
#include<string.h>
#include "mpi.h"

float function_at( float x ){
	// function is y = x
	return x;
}

float partial_integral( float low, float high, float h ){
	float function_at_low = function_at( low );
	float function_at_high = function_at( high );

	float result = (0.5)*( function_at_low + function_at_high )*h;

	return result;
}

int main(int argc, char* argv[])
{
	int my_rank, p, source, dest = 0, tag=0;
	float partial, total = 0;
	float a = 0, b = 3, n = 6, h = 0.5;
	MPI_Status status;

	/*printf("Enter lower bound, upper bound and number of stripes...\n");
	scanf("%f%f%f", &a, &b, &n);
	h = ( b - a )/n;*/

	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);
	MPI_Comm_size(MPI_COMM_WORLD, &p);
	
	if(my_rank != 0){
		partial = partial_integral( a + ( my_rank )*h, a + ( my_rank + 1 )*h, h );
		MPI_Send( &partial, 1, MPI_FLOAT, dest, tag, MPI_COMM_WORLD );
	} else{
		partial = partial_integral( a, a + h, h );
		printf("Partial integral from process 0 is %f.\n", partial);
		total += partial;
		for( source = 1; source < p; source++ ){
			MPI_Recv( &partial, 1, MPI_FLOAT, source, tag, MPI_COMM_WORLD, &status);
			printf("Partial integral from process %d is %f.\n", status.MPI_SOURCE, partial);
			total += partial;
		}
		printf("Total integral: %f.\n", total );
	}
	
	MPI_Finalize();
	return 0;
}
